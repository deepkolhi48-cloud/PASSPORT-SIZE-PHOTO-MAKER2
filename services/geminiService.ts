
import { GoogleGenAI, Modality } from "@google/genai";

if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable is not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const GENERATION_PROMPT = `Ultra-realistic passport photo of the person in the image (exact face, 99% likeness, no changes). The person should be wearing a 3-piece suit with a tie, have a neutral closed-lip expression, a straight look, with both ears and shoulders visible. The lighting must be even, against a plain white or light-blue background.`;

const VALIDATION_PROMPT = `Analyze this image and determine if it meets standard passport photo requirements. Provide a brief, bulleted list of your findings based on these rules:
1. Neutral, closed-lip expression.
2. Straight look, facing forward.
3. Both ears are visible.
4. Both shoulders are included and visible.
5. Lighting is even with no harsh shadows.
6. Background is plain white or light-blue.
Start your response with a summary sentence (e.g., "This photo appears to meet most requirements.") and then provide the bulleted list.`;

/**
 * Generates a passport photo using an input image.
 * @param base64Image The base64 encoded string of the user's photo.
 * @param mimeType The MIME type of the user's photo.
 * @returns An object containing the base64 string and MIME type of the generated image.
 */
export const generatePassportPhoto = async (base64Image: string, mimeType: string): Promise<{ base64: string, mimeType: string }> => {
  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [
          {
            inlineData: {
              data: base64Image,
              mimeType: mimeType,
            },
          },
          {
            text: GENERATION_PROMPT,
          },
        ],
      },
      config: {
          responseModalities: [Modality.IMAGE],
      },
    });

    const imagePart = response.candidates?.[0]?.content?.parts?.find(part => part.inlineData);
    if (imagePart && imagePart.inlineData) {
      return {
        base64: imagePart.inlineData.data,
        mimeType: imagePart.inlineData.mimeType,
      };
    }
    throw new Error("No image was generated by the API.");

  } catch (error) {
    console.error("Error generating passport photo:", error);
    throw new Error("Failed to generate image. The model may have refused the request due to safety policies.");
  }
};


/**
 * Validates a generated passport photo against a set of rules.
 * @param base64Image The base64 encoded string of the generated photo.
 * @param mimeType The MIME type of the generated photo.
 * @returns A string containing the validation feedback.
 */
export const validatePassportPhoto = async (base64Image: string, mimeType: string): Promise<string> => {
  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: {
        parts: [
          {
            inlineData: {
              data: base64Image,
              mimeType: mimeType,
            },
          },
          {
            text: VALIDATION_PROMPT,
          },
        ]
      }
    });

    return response.text;
  } catch (error) {
    console.error("Error validating passport photo:", error);
    throw new Error("Failed to validate image.");
  }
};
